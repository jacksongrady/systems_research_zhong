
Debug/memwrite.elf:     file format elf32-littlearm
Debug/memwrite.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000349

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000004ac memsz 0x000004ac flags r-x
private flags = 0x5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00000000  20000000  20000000  000104ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  000104ac  2**0
                  CONTENTS, READONLY
  6 .comment      00000057  00000000  00000000  000104da  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000ad1  00000000  00000000  00010531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000002e1  00000000  00000000  00011002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    000002da  00000000  00000000  000112e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 000000e8  00000000  00000000  000115c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 000000a0  00000000  00000000  000116a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   0000058c  00000000  00000000  00011748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000674  00000000  00000000  00011cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  000001d4  00000000  00000000  00012348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00000044  00000000  00000000  0001251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000013  00000000  00000000  00012560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000198 l    d  .text	00000000 .text
080003fc l    d  .rodata	00000000 .rodata
20000000 l    d  .data	00000000 .data
20000000 l    d  .bss	00000000 .bss
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 startup_stm32f411xe.o
0800035c l       .text	00000000 LoopCopyDataInit
08000356 l       .text	00000000 CopyDataInit
0800036e l       .text	00000000 LoopFillZerobss
0800036a l       .text	00000000 FillZerobss
08000398 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 memwrite.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
08000398  w    F .text	00000002 RTC_Alarm_IRQHandler
08000398  w    F .text	00000002 EXTI2_IRQHandler
08000398  w    F .text	00000002 DebugMon_Handler
08000398  w    F .text	00000002 SPI4_IRQHandler
08000398  w    F .text	00000002 TIM1_CC_IRQHandler
08000398  w    F .text	00000002 DMA2_Stream5_IRQHandler
08000398  w    F .text	00000002 HardFault_Handler
08000398  w    F .text	00000002 DMA1_Stream5_IRQHandler
08000398  w    F .text	00000002 SysTick_Handler
08000398  w    F .text	00000002 PVD_IRQHandler
08000398  w    F .text	00000002 SDIO_IRQHandler
08000398  w    F .text	00000002 TAMP_STAMP_IRQHandler
080004ac g       *ABS*	00000000 _sidata
08000398  w    F .text	00000002 PendSV_Handler
08000234 g     F .text	00000020 print_char
08000214 g     F .text	00000020 syscall
08000398  w    F .text	00000002 NMI_Handler
08000398  w    F .text	00000002 EXTI3_IRQHandler
08000398  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
080003fc g       .text	00000000 _etext
20000000 g       .bss	00000000 _sbss
08000398  w    F .text	00000002 I2C3_ER_IRQHandler
08000398  w    F .text	00000002 EXTI0_IRQHandler
08000398  w    F .text	00000002 I2C2_EV_IRQHandler
08000398  w    F .text	00000002 DMA1_Stream2_IRQHandler
08000398  w    F .text	00000002 FPU_IRQHandler
08000398  w    F .text	00000002 UsageFault_Handler
080002b4 g     F .text	00000038 str_len
08000398  w    F .text	00000002 DMA2_Stream2_IRQHandler
20000000 g       .bss	00000000 __bss_start__
20000000 g       .data	00000000 _sdata
08000398  w    F .text	00000002 SPI1_IRQHandler
08000398  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08000398  w    F .text	00000002 DMA2_Stream3_IRQHandler
08000280 g     F .text	0000001a open_host_file
0800039c g     F .text	00000048 __libc_init_array
08000398  w    F .text	00000002 USART6_IRQHandler
080003e4 g     F .text	00000000 _init
20000000 g       .bss	00000000 _ebss
08000348  w    F .text	00000038 Reset_Handler
08000398  w    F .text	00000002 DMA2_Stream0_IRQHandler
08000398  w    F .text	00000002 TIM4_IRQHandler
08000398  w    F .text	00000002 I2C1_EV_IRQHandler
08000398  w    F .text	00000002 DMA1_Stream6_IRQHandler
08000398  w    F .text	00000002 DMA1_Stream1_IRQHandler
20000000 g       .bss	00000000 __bss_end__
08000398  w    F .text	00000002 TIM3_IRQHandler
08000398  w    F .text	00000002 RCC_IRQHandler
08000398 g       .text	00000002 Default_Handler
08000398  w    F .text	00000002 EXTI15_10_IRQHandler
08000398  w    F .text	00000002 ADC_IRQHandler
08000398  w    F .text	00000002 DMA1_Stream7_IRQHandler
08000398  w    F .text	00000002 SPI5_IRQHandler
0800029a g     F .text	0000001a read_host_file_to_mem
08000398  w    F .text	00000002 TIM5_IRQHandler
08000398  w    F .text	00000002 DMA2_Stream7_IRQHandler
08000398  w    F .text	00000002 I2C3_EV_IRQHandler
08000398  w    F .text	00000002 EXTI9_5_IRQHandler
08000398  w    F .text	00000002 RTC_WKUP_IRQHandler
08000398  w    F .text	00000002 SPI2_IRQHandler
08000398  w    F .text	00000002 MemManage_Handler
08000198 g     F .text	0000007c main
08000398  w    F .text	00000002 DMA1_Stream0_IRQHandler
08000398  w    F .text	00000002 SVC_Handler
08000398  w    F .text	00000002 EXTI4_IRQHandler
080002ec g     F .text	0000005c SystemInit
080003f0 g     F .text	00000000 _fini
08000398  w    F .text	00000002 WWDG_IRQHandler
08000398  w    F .text	00000002 TIM2_IRQHandler
08000398  w    F .text	00000002 OTG_FS_WKUP_IRQHandler
08000398  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
20020000 g       *ABS*	00000000 _estack
08000398  w    F .text	00000002 EXTI1_IRQHandler
20000000 g       .data	00000000 _edata
08000398  w    F .text	00000002 USART2_IRQHandler
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000254 g     F .text	0000002c println_str
08000398  w    F .text	00000002 I2C2_ER_IRQHandler
08000398  w    F .text	00000002 DMA2_Stream1_IRQHandler
08000398  w    F .text	00000002 FLASH_IRQHandler
08000398  w    F .text	00000002 DMA2_Stream4_IRQHandler
08000398  w    F .text	00000002 BusFault_Handler
08000398  w    F .text	00000002 USART1_IRQHandler
08000398  w    F .text	00000002 OTG_FS_IRQHandler
08000398  w    F .text	00000002 SPI3_IRQHandler
08000398  w    F .text	00000002 DMA1_Stream4_IRQHandler
08000398  w    F .text	00000002 I2C1_ER_IRQHandler
08000398  w    F .text	00000002 DMA2_Stream6_IRQHandler
08000398  w    F .text	00000002 DMA1_Stream3_IRQHandler



Disassembly of section .text:

08000198 <main>:


/*************************************************
* main code starts from here
*************************************************/
int main(void){
 8000198:	b500      	push	{lr}
 800019a:	b08b      	sub	sp, #44	; 0x2c
    char* path_name = "/Users/jacksondgrady/Desktop/zhong_research/stm32f4-bare-metal/projects/memwrite/hello.txt";
 800019c:	4b17      	ldr	r3, [pc, #92]	; (80001fc <main+0x64>)
 800019e:	9309      	str	r3, [sp, #36]	; 0x24
    FileInput file;
    file.path = path_name;
 80001a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80001a2:	9304      	str	r3, [sp, #16]
    file.path_length = str_len(path_name);
 80001a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80001a6:	f000 f885 	bl	80002b4 <str_len>
 80001aa:	4603      	mov	r3, r0
 80001ac:	9306      	str	r3, [sp, #24]
    file.perms = 2;
 80001ae:	2302      	movs	r3, #2
 80001b0:	9305      	str	r3, [sp, #20]

    println_str("opening file...");
 80001b2:	4813      	ldr	r0, [pc, #76]	; (8000200 <main+0x68>)
 80001b4:	f000 f84e 	bl	8000254 <println_str>

    int fd = open_host_file(&file);
 80001b8:	ab04      	add	r3, sp, #16
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f860 	bl	8000280 <open_host_file>
 80001c0:	9008      	str	r0, [sp, #32]

    println_str("opened file");
 80001c2:	4810      	ldr	r0, [pc, #64]	; (8000204 <main+0x6c>)
 80001c4:	f000 f846 	bl	8000254 <println_str>

    ReadInput read;
    read.fd = fd;
 80001c8:	9b08      	ldr	r3, [sp, #32]
 80001ca:	9301      	str	r3, [sp, #4]
    read.buff = 0x20001000;
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <main+0x70>)
 80001ce:	9302      	str	r3, [sp, #8]
    read.num_bytes = 10;
 80001d0:	230a      	movs	r3, #10
 80001d2:	9303      	str	r3, [sp, #12]

    println_str("writing to target memory...");
 80001d4:	480d      	ldr	r0, [pc, #52]	; (800020c <main+0x74>)
 80001d6:	f000 f83d 	bl	8000254 <println_str>

    read_host_file_to_mem(&read);
 80001da:	ab01      	add	r3, sp, #4
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 f85c 	bl	800029a <read_host_file_to_mem>

    println_str("wrote to target memory...");
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <main+0x78>)
 80001e4:	f000 f836 	bl	8000254 <println_str>

    char* string = 0x20001000;
 80001e8:	4b07      	ldr	r3, [pc, #28]	; (8000208 <main+0x70>)
 80001ea:	9307      	str	r3, [sp, #28]
    string[10] = '\0';
 80001ec:	9b07      	ldr	r3, [sp, #28]
 80001ee:	330a      	adds	r3, #10
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
    println_str(string);
 80001f4:	9807      	ldr	r0, [sp, #28]
 80001f6:	f000 f82d 	bl	8000254 <println_str>

    while (1){
 80001fa:	e7fe      	b.n	80001fa <main+0x62>
 80001fc:	080003fc 	.word	0x080003fc
 8000200:	08000458 	.word	0x08000458
 8000204:	08000468 	.word	0x08000468
 8000208:	20001000 	.word	0x20001000
 800020c:	08000474 	.word	0x08000474
 8000210:	08000490 	.word	0x08000490

08000214 <syscall>:
    }
    __asm("NOP"); // Assembly inline can be used if needed
    return 0;
}

int syscall(int nr, int arg){
 8000214:	b084      	sub	sp, #16
 8000216:	9001      	str	r0, [sp, #4]
 8000218:	9100      	str	r1, [sp, #0]
    int res = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	9303      	str	r3, [sp, #12]
    __asm(  
 800021e:	9b01      	ldr	r3, [sp, #4]
 8000220:	9a00      	ldr	r2, [sp, #0]
 8000222:	4618      	mov	r0, r3
 8000224:	4611      	mov	r1, r2
 8000226:	beab      	bkpt	0x00ab
 8000228:	4603      	mov	r3, r0
 800022a:	9303      	str	r3, [sp, #12]
            "bkpt #0xab;"
            "mov %[result], r0"
            : [result] "=r" (res)
            : [num] "r" (nr), [argument] "r" (arg)
        );
    return res;
 800022c:	9b03      	ldr	r3, [sp, #12]
}
 800022e:	4618      	mov	r0, r3
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <print_char>:

int print_char(char c){
 8000234:	b500      	push	{lr}
 8000236:	b083      	sub	sp, #12
 8000238:	4603      	mov	r3, r0
 800023a:	f88d 3007 	strb.w	r3, [sp, #7]
    return syscall(0x03, (int)&c);
 800023e:	f10d 0307 	add.w	r3, sp, #7
 8000242:	4619      	mov	r1, r3
 8000244:	2003      	movs	r0, #3
 8000246:	f7ff ffe5 	bl	8000214 <syscall>
 800024a:	4603      	mov	r3, r0
}
 800024c:	4618      	mov	r0, r3
 800024e:	b003      	add	sp, #12
 8000250:	f85d fb04 	ldr.w	pc, [sp], #4

08000254 <println_str>:
        return print_char('\n');
    else
        return ret;
}

int println_str(char* str){
 8000254:	b500      	push	{lr}
 8000256:	b085      	sub	sp, #20
 8000258:	9001      	str	r0, [sp, #4]
    int ret = syscall(0x04, (int)str);
 800025a:	9b01      	ldr	r3, [sp, #4]
 800025c:	4619      	mov	r1, r3
 800025e:	2004      	movs	r0, #4
 8000260:	f7ff ffd8 	bl	8000214 <syscall>
 8000264:	9003      	str	r0, [sp, #12]
    if(ret >= 0)
 8000266:	9b03      	ldr	r3, [sp, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	db04      	blt.n	8000276 <println_str+0x22>
        return print_char('\n');
 800026c:	200a      	movs	r0, #10
 800026e:	f7ff ffe1 	bl	8000234 <print_char>
 8000272:	4603      	mov	r3, r0
 8000274:	e000      	b.n	8000278 <println_str+0x24>
    else
        return ret;
 8000276:	9b03      	ldr	r3, [sp, #12]
}
 8000278:	4618      	mov	r0, r3
 800027a:	b005      	add	sp, #20
 800027c:	f85d fb04 	ldr.w	pc, [sp], #4

08000280 <open_host_file>:
    else
        return ret;

}

int open_host_file(FileInput* file){
 8000280:	b500      	push	{lr}
 8000282:	b083      	sub	sp, #12
 8000284:	9001      	str	r0, [sp, #4]
    return syscall(0x01, (int)file);
 8000286:	9b01      	ldr	r3, [sp, #4]
 8000288:	4619      	mov	r1, r3
 800028a:	2001      	movs	r0, #1
 800028c:	f7ff ffc2 	bl	8000214 <syscall>
 8000290:	4603      	mov	r3, r0
}
 8000292:	4618      	mov	r0, r3
 8000294:	b003      	add	sp, #12
 8000296:	f85d fb04 	ldr.w	pc, [sp], #4

0800029a <read_host_file_to_mem>:

int read_host_file_to_mem(ReadInput* read_input){
 800029a:	b500      	push	{lr}
 800029c:	b083      	sub	sp, #12
 800029e:	9001      	str	r0, [sp, #4]
    return syscall(0x06, (int)read_input);
 80002a0:	9b01      	ldr	r3, [sp, #4]
 80002a2:	4619      	mov	r1, r3
 80002a4:	2006      	movs	r0, #6
 80002a6:	f7ff ffb5 	bl	8000214 <syscall>
 80002aa:	4603      	mov	r3, r0
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	b003      	add	sp, #12
 80002b0:	f85d fb04 	ldr.w	pc, [sp], #4

080002b4 <str_len>:

int str_len(char* str){
 80002b4:	b084      	sub	sp, #16
 80002b6:	9001      	str	r0, [sp, #4]
    int i = 0;
 80002b8:	2300      	movs	r3, #0
 80002ba:	9303      	str	r3, [sp, #12]
    while(1){
        if(str[i++] == '\0'){
 80002bc:	9b03      	ldr	r3, [sp, #12]
 80002be:	1c5a      	adds	r2, r3, #1
 80002c0:	9203      	str	r2, [sp, #12]
 80002c2:	461a      	mov	r2, r3
 80002c4:	9b01      	ldr	r3, [sp, #4]
 80002c6:	4413      	add	r3, r2
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d006      	beq.n	80002dc <str_len+0x28>
            break;
        }
        if(i > 1000000){
 80002ce:	9b03      	ldr	r3, [sp, #12]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <str_len+0x34>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	ddf2      	ble.n	80002bc <str_len+0x8>
            return -1;
 80002d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002da:	e002      	b.n	80002e2 <str_len+0x2e>
            break;
 80002dc:	bf00      	nop
        }
    }
    return i - 1;
 80002de:	9b03      	ldr	r3, [sp, #12]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	b004      	add	sp, #16
 80002e6:	4770      	bx	lr
 80002e8:	000f4240 	.word	0x000f4240

080002ec <SystemInit>:
*************************************************/
void SystemInit(void)
{
	/* FPU settings, can be enabled from project makefile */
	#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <SystemInit+0x50>)
 80002ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <SystemInit+0x50>)
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	#endif

	/* Reset the RCC clock configuration to the default reset state */
	/* Set HSION bit */
	RCC->CR |= (1U << 0);
 80002fc:	4b10      	ldr	r3, [pc, #64]	; (8000340 <SystemInit+0x54>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0f      	ldr	r2, [pc, #60]	; (8000340 <SystemInit+0x54>)
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8000308:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <SystemInit+0x54>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]

	/* Reset HSEON (16), CSSON (19) and PLLON (24) bits */
	RCC->CR &= ~((1U << 16) | (1U << 19) | (1U << 24));
 800030e:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <SystemInit+0x54>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <SystemInit+0x54>)
 8000314:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800031c:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register to reset value */
	RCC->PLLCFGR = 0x24003010UL;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <SystemInit+0x54>)
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <SystemInit+0x58>)
 8000322:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= ~(1U << 18);
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <SystemInit+0x54>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <SystemInit+0x54>)
 800032a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800032e:	6013      	str	r3, [r2, #0]

	/* Disable all clock interrupts */
	RCC->CIR = 0x00000000UL;
 8000330:	4b03      	ldr	r3, [pc, #12]	; (8000340 <SystemInit+0x54>)
 8000332:	2200      	movs	r2, #0
 8000334:	60da      	str	r2, [r3, #12]
}
 8000336:	bf00      	nop
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	40023800 	.word	0x40023800
 8000344:	24003010 	.word	0x24003010

08000348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000380 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800034c:	480d      	ldr	r0, [pc, #52]	; (8000384 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800034e:	490e      	ldr	r1, [pc, #56]	; (8000388 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000350:	4a0e      	ldr	r2, [pc, #56]	; (800038c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000364:	4c0b      	ldr	r4, [pc, #44]	; (8000394 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000372:	f7ff ffbb 	bl	80002ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800037a:	f7ff ff0d 	bl	8000198 <main>
  bx  lr    
 800037e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800038c:	080004ac 	.word	0x080004ac
  ldr r2, =_sbss
 8000390:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000394:	20000000 	.word	0x20000000

08000398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	; (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	; (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	; (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	; (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
	...

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
